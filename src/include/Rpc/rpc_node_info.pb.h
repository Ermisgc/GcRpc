// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_node_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_5fnode_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_5fnode_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_5fnode_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_5fnode_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5fnode_5finfo_2eproto;
namespace GcRpc {
class RpcNodeInfo;
struct RpcNodeInfoDefaultTypeInternal;
extern RpcNodeInfoDefaultTypeInternal _RpcNodeInfo_default_instance_;
}  // namespace GcRpc
PROTOBUF_NAMESPACE_OPEN
template<> ::GcRpc::RpcNodeInfo* Arena::CreateMaybeMessage<::GcRpc::RpcNodeInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace GcRpc {

// ===================================================================

class RpcNodeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GcRpc.RpcNodeInfo) */ {
 public:
  inline RpcNodeInfo() : RpcNodeInfo(nullptr) {}
  ~RpcNodeInfo() override;
  explicit PROTOBUF_CONSTEXPR RpcNodeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcNodeInfo(const RpcNodeInfo& from);
  RpcNodeInfo(RpcNodeInfo&& from) noexcept
    : RpcNodeInfo() {
    *this = ::std::move(from);
  }

  inline RpcNodeInfo& operator=(const RpcNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcNodeInfo& operator=(RpcNodeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcNodeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcNodeInfo* internal_default_instance() {
    return reinterpret_cast<const RpcNodeInfo*>(
               &_RpcNodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RpcNodeInfo& a, RpcNodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcNodeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcNodeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcNodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcNodeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcNodeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcNodeInfo& from) {
    RpcNodeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcNodeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GcRpc.RpcNodeInfo";
  }
  protected:
  explicit RpcNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kPortFieldNumber = 2,
    kActiveConnFieldNumber = 3,
    kMaxConnFieldNumber = 4,
    kCpuUtilFieldNumber = 5,
    kMemUtilFieldNumber = 6,
  };
  // uint32 addr = 1;
  void clear_addr();
  uint32_t addr() const;
  void set_addr(uint32_t value);
  private:
  uint32_t _internal_addr() const;
  void _internal_set_addr(uint32_t value);
  public:

  // uint32 port = 2;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // uint32 active_conn = 3;
  void clear_active_conn();
  uint32_t active_conn() const;
  void set_active_conn(uint32_t value);
  private:
  uint32_t _internal_active_conn() const;
  void _internal_set_active_conn(uint32_t value);
  public:

  // uint32 max_conn = 4;
  void clear_max_conn();
  uint32_t max_conn() const;
  void set_max_conn(uint32_t value);
  private:
  uint32_t _internal_max_conn() const;
  void _internal_set_max_conn(uint32_t value);
  public:

  // float cpu_util = 5;
  void clear_cpu_util();
  float cpu_util() const;
  void set_cpu_util(float value);
  private:
  float _internal_cpu_util() const;
  void _internal_set_cpu_util(float value);
  public:

  // float mem_util = 6;
  void clear_mem_util();
  float mem_util() const;
  void set_mem_util(float value);
  private:
  float _internal_mem_util() const;
  void _internal_set_mem_util(float value);
  public:

  // @@protoc_insertion_point(class_scope:GcRpc.RpcNodeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t addr_;
    uint32_t port_;
    uint32_t active_conn_;
    uint32_t max_conn_;
    float cpu_util_;
    float mem_util_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_5fnode_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcNodeInfo

// uint32 addr = 1;
inline void RpcNodeInfo::clear_addr() {
  _impl_.addr_ = 0u;
}
inline uint32_t RpcNodeInfo::_internal_addr() const {
  return _impl_.addr_;
}
inline uint32_t RpcNodeInfo::addr() const {
  // @@protoc_insertion_point(field_get:GcRpc.RpcNodeInfo.addr)
  return _internal_addr();
}
inline void RpcNodeInfo::_internal_set_addr(uint32_t value) {
  
  _impl_.addr_ = value;
}
inline void RpcNodeInfo::set_addr(uint32_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:GcRpc.RpcNodeInfo.addr)
}

// uint32 port = 2;
inline void RpcNodeInfo::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t RpcNodeInfo::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t RpcNodeInfo::port() const {
  // @@protoc_insertion_point(field_get:GcRpc.RpcNodeInfo.port)
  return _internal_port();
}
inline void RpcNodeInfo::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void RpcNodeInfo::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GcRpc.RpcNodeInfo.port)
}

// uint32 active_conn = 3;
inline void RpcNodeInfo::clear_active_conn() {
  _impl_.active_conn_ = 0u;
}
inline uint32_t RpcNodeInfo::_internal_active_conn() const {
  return _impl_.active_conn_;
}
inline uint32_t RpcNodeInfo::active_conn() const {
  // @@protoc_insertion_point(field_get:GcRpc.RpcNodeInfo.active_conn)
  return _internal_active_conn();
}
inline void RpcNodeInfo::_internal_set_active_conn(uint32_t value) {
  
  _impl_.active_conn_ = value;
}
inline void RpcNodeInfo::set_active_conn(uint32_t value) {
  _internal_set_active_conn(value);
  // @@protoc_insertion_point(field_set:GcRpc.RpcNodeInfo.active_conn)
}

// uint32 max_conn = 4;
inline void RpcNodeInfo::clear_max_conn() {
  _impl_.max_conn_ = 0u;
}
inline uint32_t RpcNodeInfo::_internal_max_conn() const {
  return _impl_.max_conn_;
}
inline uint32_t RpcNodeInfo::max_conn() const {
  // @@protoc_insertion_point(field_get:GcRpc.RpcNodeInfo.max_conn)
  return _internal_max_conn();
}
inline void RpcNodeInfo::_internal_set_max_conn(uint32_t value) {
  
  _impl_.max_conn_ = value;
}
inline void RpcNodeInfo::set_max_conn(uint32_t value) {
  _internal_set_max_conn(value);
  // @@protoc_insertion_point(field_set:GcRpc.RpcNodeInfo.max_conn)
}

// float cpu_util = 5;
inline void RpcNodeInfo::clear_cpu_util() {
  _impl_.cpu_util_ = 0;
}
inline float RpcNodeInfo::_internal_cpu_util() const {
  return _impl_.cpu_util_;
}
inline float RpcNodeInfo::cpu_util() const {
  // @@protoc_insertion_point(field_get:GcRpc.RpcNodeInfo.cpu_util)
  return _internal_cpu_util();
}
inline void RpcNodeInfo::_internal_set_cpu_util(float value) {
  
  _impl_.cpu_util_ = value;
}
inline void RpcNodeInfo::set_cpu_util(float value) {
  _internal_set_cpu_util(value);
  // @@protoc_insertion_point(field_set:GcRpc.RpcNodeInfo.cpu_util)
}

// float mem_util = 6;
inline void RpcNodeInfo::clear_mem_util() {
  _impl_.mem_util_ = 0;
}
inline float RpcNodeInfo::_internal_mem_util() const {
  return _impl_.mem_util_;
}
inline float RpcNodeInfo::mem_util() const {
  // @@protoc_insertion_point(field_get:GcRpc.RpcNodeInfo.mem_util)
  return _internal_mem_util();
}
inline void RpcNodeInfo::_internal_set_mem_util(float value) {
  
  _impl_.mem_util_ = value;
}
inline void RpcNodeInfo::set_mem_util(float value) {
  _internal_set_mem_util(value);
  // @@protoc_insertion_point(field_set:GcRpc.RpcNodeInfo.mem_util)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace GcRpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_5fnode_5finfo_2eproto
