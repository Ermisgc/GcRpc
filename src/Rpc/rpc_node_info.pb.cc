// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_node_info.proto

#include "Rpc/rpc_node_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace GcRpc {
PROTOBUF_CONSTEXPR RpcNodeInfo::RpcNodeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addr_)*/0u
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.active_conn_)*/0u
  , /*decltype(_impl_.max_conn_)*/0u
  , /*decltype(_impl_.cpu_util_)*/0
  , /*decltype(_impl_.mem_util_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RpcNodeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RpcNodeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RpcNodeInfoDefaultTypeInternal() {}
  union {
    RpcNodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RpcNodeInfoDefaultTypeInternal _RpcNodeInfo_default_instance_;
}  // namespace GcRpc
static ::_pb::Metadata file_level_metadata_rpc_5fnode_5finfo_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_rpc_5fnode_5finfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rpc_5fnode_5finfo_2eproto = nullptr;

const uint32_t TableStruct_rpc_5fnode_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GcRpc::RpcNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GcRpc::RpcNodeInfo, _impl_.addr_),
  PROTOBUF_FIELD_OFFSET(::GcRpc::RpcNodeInfo, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::GcRpc::RpcNodeInfo, _impl_.active_conn_),
  PROTOBUF_FIELD_OFFSET(::GcRpc::RpcNodeInfo, _impl_.max_conn_),
  PROTOBUF_FIELD_OFFSET(::GcRpc::RpcNodeInfo, _impl_.cpu_util_),
  PROTOBUF_FIELD_OFFSET(::GcRpc::RpcNodeInfo, _impl_.mem_util_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::GcRpc::RpcNodeInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::GcRpc::_RpcNodeInfo_default_instance_._instance,
};

const char descriptor_table_protodef_rpc_5fnode_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023rpc_node_info.proto\022\005GcRpc\"t\n\013RpcNodeI"
  "nfo\022\014\n\004addr\030\001 \001(\r\022\014\n\004port\030\002 \001(\r\022\023\n\013activ"
  "e_conn\030\003 \001(\r\022\020\n\010max_conn\030\004 \001(\r\022\020\n\010cpu_ut"
  "il\030\005 \001(\002\022\020\n\010mem_util\030\006 \001(\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_rpc_5fnode_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rpc_5fnode_5finfo_2eproto = {
    false, false, 154, descriptor_table_protodef_rpc_5fnode_5finfo_2eproto,
    "rpc_node_info.proto",
    &descriptor_table_rpc_5fnode_5finfo_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_rpc_5fnode_5finfo_2eproto::offsets,
    file_level_metadata_rpc_5fnode_5finfo_2eproto, file_level_enum_descriptors_rpc_5fnode_5finfo_2eproto,
    file_level_service_descriptors_rpc_5fnode_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rpc_5fnode_5finfo_2eproto_getter() {
  return &descriptor_table_rpc_5fnode_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rpc_5fnode_5finfo_2eproto(&descriptor_table_rpc_5fnode_5finfo_2eproto);
namespace GcRpc {

// ===================================================================

class RpcNodeInfo::_Internal {
 public:
};

RpcNodeInfo::RpcNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GcRpc.RpcNodeInfo)
}
RpcNodeInfo::RpcNodeInfo(const RpcNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RpcNodeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.active_conn_){}
    , decltype(_impl_.max_conn_){}
    , decltype(_impl_.cpu_util_){}
    , decltype(_impl_.mem_util_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.addr_, &from._impl_.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mem_util_) -
    reinterpret_cast<char*>(&_impl_.addr_)) + sizeof(_impl_.mem_util_));
  // @@protoc_insertion_point(copy_constructor:GcRpc.RpcNodeInfo)
}

inline void RpcNodeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){0u}
    , decltype(_impl_.port_){0u}
    , decltype(_impl_.active_conn_){0u}
    , decltype(_impl_.max_conn_){0u}
    , decltype(_impl_.cpu_util_){0}
    , decltype(_impl_.mem_util_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RpcNodeInfo::~RpcNodeInfo() {
  // @@protoc_insertion_point(destructor:GcRpc.RpcNodeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RpcNodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RpcNodeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RpcNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:GcRpc.RpcNodeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mem_util_) -
      reinterpret_cast<char*>(&_impl_.addr_)) + sizeof(_impl_.mem_util_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RpcNodeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 active_conn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.active_conn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_conn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_conn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float cpu_util = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.cpu_util_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float mem_util = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.mem_util_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RpcNodeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GcRpc.RpcNodeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 addr = 1;
  if (this->_internal_addr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_addr(), target);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // uint32 active_conn = 3;
  if (this->_internal_active_conn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_active_conn(), target);
  }

  // uint32 max_conn = 4;
  if (this->_internal_max_conn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_conn(), target);
  }

  // float cpu_util = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu_util = this->_internal_cpu_util();
  uint32_t raw_cpu_util;
  memcpy(&raw_cpu_util, &tmp_cpu_util, sizeof(tmp_cpu_util));
  if (raw_cpu_util != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_cpu_util(), target);
  }

  // float mem_util = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mem_util = this->_internal_mem_util();
  uint32_t raw_mem_util;
  memcpy(&raw_mem_util, &tmp_mem_util, sizeof(tmp_mem_util));
  if (raw_mem_util != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_mem_util(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GcRpc.RpcNodeInfo)
  return target;
}

size_t RpcNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GcRpc.RpcNodeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 addr = 1;
  if (this->_internal_addr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_addr());
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // uint32 active_conn = 3;
  if (this->_internal_active_conn() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_active_conn());
  }

  // uint32 max_conn = 4;
  if (this->_internal_max_conn() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_conn());
  }

  // float cpu_util = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu_util = this->_internal_cpu_util();
  uint32_t raw_cpu_util;
  memcpy(&raw_cpu_util, &tmp_cpu_util, sizeof(tmp_cpu_util));
  if (raw_cpu_util != 0) {
    total_size += 1 + 4;
  }

  // float mem_util = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mem_util = this->_internal_mem_util();
  uint32_t raw_mem_util;
  memcpy(&raw_mem_util, &tmp_mem_util, sizeof(tmp_mem_util));
  if (raw_mem_util != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RpcNodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RpcNodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RpcNodeInfo::GetClassData() const { return &_class_data_; }


void RpcNodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RpcNodeInfo*>(&to_msg);
  auto& from = static_cast<const RpcNodeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GcRpc.RpcNodeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_addr() != 0) {
    _this->_internal_set_addr(from._internal_addr());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_active_conn() != 0) {
    _this->_internal_set_active_conn(from._internal_active_conn());
  }
  if (from._internal_max_conn() != 0) {
    _this->_internal_set_max_conn(from._internal_max_conn());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpu_util = from._internal_cpu_util();
  uint32_t raw_cpu_util;
  memcpy(&raw_cpu_util, &tmp_cpu_util, sizeof(tmp_cpu_util));
  if (raw_cpu_util != 0) {
    _this->_internal_set_cpu_util(from._internal_cpu_util());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_mem_util = from._internal_mem_util();
  uint32_t raw_mem_util;
  memcpy(&raw_mem_util, &tmp_mem_util, sizeof(tmp_mem_util));
  if (raw_mem_util != 0) {
    _this->_internal_set_mem_util(from._internal_mem_util());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RpcNodeInfo::CopyFrom(const RpcNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GcRpc.RpcNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcNodeInfo::IsInitialized() const {
  return true;
}

void RpcNodeInfo::InternalSwap(RpcNodeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RpcNodeInfo, _impl_.mem_util_)
      + sizeof(RpcNodeInfo::_impl_.mem_util_)
      - PROTOBUF_FIELD_OFFSET(RpcNodeInfo, _impl_.addr_)>(
          reinterpret_cast<char*>(&_impl_.addr_),
          reinterpret_cast<char*>(&other->_impl_.addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RpcNodeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpc_5fnode_5finfo_2eproto_getter, &descriptor_table_rpc_5fnode_5finfo_2eproto_once,
      file_level_metadata_rpc_5fnode_5finfo_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace GcRpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GcRpc::RpcNodeInfo*
Arena::CreateMaybeMessage< ::GcRpc::RpcNodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GcRpc::RpcNodeInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
